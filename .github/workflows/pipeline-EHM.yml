name: Backend CI/CD Pipeline

# Trigger: Push a una rama con Pull Request abierto
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'backend/**'
      - '.github/workflows/**'

jobs:
  # Job 1: Tests del Backend
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup database for tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
        run: npm test

  # Job 2: Build del Backend
  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir deployment-package
          cp -r backend/dist deployment-package/
          cp -r backend/node_modules deployment-package/
          cp backend/package.json deployment-package/
          cp backend/prisma deployment-package/ -r
          tar -czf backend-deployment.tar.gz deployment-package/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend-deployment.tar.gz
          retention-days: 1

  # Job 3: Deploy a EC2
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged == true || contains(github.event.pull_request.labels.*.name, 'deploy')
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Configurar SSH
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Crear directorio de despliegue remoto si no existe
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "mkdir -p /home/$EC2_USERNAME/app"
          
          # Transferir archivos
          scp -i private_key.pem -o StrictHostKeyChecking=no backend-deployment.tar.gz $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/app/
          
          # Desplegar en el servidor
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            cd /home/$EC2_USERNAME/app
            
            # Detener la aplicación si está corriendo
            pm2 stop backend || true
            
            # Limpiar despliegue anterior
            rm -rf deployment-package/
            
            # Extraer nueva versión
            tar -xzf backend-deployment.tar.gz
            cd deployment-package/
            
            # Verificar que existe .env en el servidor
            if [ ! -f /home/$EC2_USERNAME/app/.env ]; then
              echo "ERROR: .env file not found in EC2! Please create it with DATABASE_URL and other required variables."
              exit 1
            fi
            
            # Copiar .env existente desde el directorio principal
            cp /home/$EC2_USERNAME/app/.env .env
            
            # Actualizar NODE_ENV para producción
            sed -i 's/NODE_ENV=.*/NODE_ENV=production/' .env
            
            # Asegurar que PORT esté configurado (agregar si no existe)
            if ! grep -q "^PORT=" .env; then
              echo "PORT=3000" >> .env
            fi
            
            # Ejecutar migraciones de base de datos
            npx prisma migrate deploy
            
            # Instalar PM2 si no está instalado
            which pm2 || npm install -g pm2
            
            # Iniciar la aplicación con PM2
            pm2 start dist/index.js --name backend --update-env
            
            # Guardar configuración PM2
            pm2 save
            pm2 startup || true
          EOF
          
          # Limpiar archivos temporales
          rm -f private_key.pem

      - name: Verify deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Verificar que la aplicación esté corriendo
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "pm2 status backend"
          
          # Verificar que responda HTTP (asumiendo puerto 3000)
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "curl -f http://localhost:3000/health || echo 'Health check failed but deployment completed'"
          
          rm -f private_key.pem

  # Job opcional: Notificación de resultado
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: echo "✅ Deployment successful to EC2!"
        
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: echo "❌ Deployment failed!"